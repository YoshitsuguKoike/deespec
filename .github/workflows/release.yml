name: release

on:
  push:
    branches:
      - main
    paths:
      - 'VERSION'

permissions:
  contents: write   # ← リリース作成に必須

jobs:
  build:
    strategy:
      matrix:
        include:
          # Linux amd64 on Ubuntu (native)
          - os: ubuntu-latest
            goos: linux
            goarch: amd64
          # Linux arm64 on Ubuntu (cross-compile with CGO)
          - os: ubuntu-latest
            goos: linux
            goarch: arm64
          # macOS arm64 on macOS M1/M2 (native)
          - os: macos-latest
            goos: darwin
            goarch: arm64
          # macOS amd64 on Intel Mac (native)
          - os: macos-13
            goos: darwin
            goarch: amd64
          # Windows amd64 on Windows (native)
          - os: windows-latest
            goos: windows
            goarch: amd64
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with: { go-version: "1.22" }

      - name: Read VERSION file
        id: version
        shell: bash
        run: echo "VERSION=v$(cat VERSION)" >> $GITHUB_OUTPUT

      - name: Install cross-compiler for linux/arm64
        if: matrix.goos == 'linux' && matrix.goarch == 'arm64'
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu

      - name: Build
        shell: bash
        run: |
          mkdir -p dist
          EXT=""
          if [ "${{ matrix.goos }}" = "windows" ]; then EXT=".exe"; fi

          # Set cross-compiler for linux/arm64
          if [ "${{ matrix.goos }}" = "linux" ] && [ "${{ matrix.goarch }}" = "arm64" ]; then
            export CC=aarch64-linux-gnu-gcc
          fi

          # Native or cross-compile build with CGO enabled for SQLite support
          CGO_ENABLED=1 GOOS=${{ matrix.goos }} GOARCH=${{ matrix.goarch }} \
          go build -ldflags "-X github.com/YoshitsuguKoike/deespec/internal/buildinfo.Version=${{ steps.version.outputs.VERSION }}" \
            -o dist/deespec_${{ matrix.goos }}_${{ matrix.goarch }}$EXT ./cmd/deespec

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: deespec_${{ matrix.goos }}_${{ matrix.goarch }}
          path: dist/deespec_${{ matrix.goos }}_${{ matrix.goarch }}*

  release:
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4

      - name: Read VERSION file
        id: version
        run: echo "VERSION=v$(cat VERSION)" >> $GITHUB_OUTPUT

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: deespec_*
          merge-multiple: true

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          name: ${{ steps.version.outputs.VERSION }}
          tag_name: ${{ steps.version.outputs.VERSION }}
          files: deespec_*
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
