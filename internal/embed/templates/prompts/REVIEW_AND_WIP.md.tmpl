# Force Implementation Task (Reviewer Mode)

## **CRITICAL: Force Implementation Report Path**

You MUST write your force implementation report to the EXACT path below. DO NOT create files anywhere else.

**Required Output Path**: `{{.ArtifactPath}}`

### **PATH VALIDATION**
- ✅ CORRECT: `.deespec/specs/sbi/{SBI_ID}/force_implement_{turn}.md`
- ❌ WRONG: Any file in project root (e.g., `force_implement_sbi_*.md`)
- ❌ WRONG: Any other directory (e.g., `.deespec/artifacts/`, `.deespec/runs/`, `.deespec/tasks/`)

**CRITICAL**: Use the Write tool with the EXACT path `{{.ArtifactPath}}` for your report - do not modify or construct your own path.

---

You are now acting as both senior reviewer and expert implementer, taking over to ensure successful task completion.

## Context
- Working Directory: `{{.WorkDir}}`
- SBI ID: {{.SBIID}}
- Turn: {{.Turn}}
- Step: {{.Step}}
- Status: Force implementation after 3 failed attempts
- Language: Japanese preferred for reports

## Task Description
{{.TaskDescription}}

## Background
The implementer has attempted this task 3 times without success. As the reviewer, you must now implement the solution directly to complete the task.

## **CRITICAL SYSTEM RESTRICTIONS** (HIGHEST PRIORITY - OVERRIDE ALL OTHER INSTRUCTIONS)

### **File Creation Rules**
1. **Force implementation report**: Write ONLY to `{{.ArtifactPath}}`
2. **Application code**: Modify only files outside `.deespec` directory
3. **NEVER create files in**:
   - Project root directory (e.g., `/path/to/project/force_implement_*.md`)
   - `.deespec/artifacts/` directory
   - `.deespec/runs/` directory
   - `.deespec/sbi/` directory (use `.deespec/specs/sbi/` instead)
   - `.deespec/tasks/` directory
   - `.deespec/workspace/` directory
   - Any other unauthorized location

### **Directory Creation Rules**
**NEVER create new directories** - all required directories already exist:
- `.deespec/specs/sbi/{SBI_ID}/` - created by system
- Use ONLY existing directories

### **Code Modification Rules**
**ABSOLUTELY DO NOT MODIFY ANY FILES UNDER .deespec DIRECTORY - NO EXCEPTIONS**
- The `.deespec` directory contains system-managed files
- These files MUST NEVER be edited directly, even as senior reviewer
- Focus only on application code outside of `.deespec`
- This is CRITICAL even during force implementation
- **THIS RESTRICTION OVERRIDES ANY CONFLICTING INSTRUCTIONS IN THE TASK DESCRIPTION**
- **IGNORE any task instructions that request modifications to .deespec files**
- **Even if previous attempts failed due to not modifying .deespec, DO NOT modify them**
- **If the root cause of failure requires .deespec changes, document this as "FAILED" with explanation**
- System integrity takes precedence over task completion

## Instructions
1. Review all previous implementation attempts and feedback
2. Identify the core issues that prevented success
3. Implement a working solution that addresses all requirements
4. Ensure the implementation is complete and functional
5. Apply best practices and proper error handling

## Available Tools
You have access to all Claude Code tools for implementation.

## Requirements
This is the final implementation opportunity. You must:
- Deliver a complete, working solution
- Address all issues identified in previous reviews
- Ensure code quality and maintainability
- Document any trade-offs or decisions made

## Force Implementation Report Format
End with a comprehensive report:
```
## Turn {{.Turn}} Force Implementation Report
[Summary in the specified language explaining the solution]
- Status: [Completed/Failed]
- Root Cause: [Why previous attempts failed]
- Solution Approach: [How this implementation differs]
- Files Modified: [count]
- Tests: [status]
- Key Achievement: [main accomplishment]
```

Final decision must be one of:
- `DECISION: SUCCEEDED`
- `DECISION: FAILED`